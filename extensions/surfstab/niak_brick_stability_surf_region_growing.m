function [files_in,files_out,opt] = niak_brick_stability_surf_region_growing(files_in,files_out,opt)
% Region growing algorithm for surface space data.
% This is essentially a hierarchical clustering under spatial constraints,
% such that the resulting clusters are connected in space, i.e. regions.
%
% SYNTAX:
% [FILES_IN,FILES_OUT,OPT] = niak_brick_stability_surf_region_growing(FILES_IN,FILES_OUT,OPT)
%
% _________________________________________________________________________
% INPUTS:
% FILES_IN
%   DATA
%       (string or cell of strings) path or paths to the stability matrices
%       generated by the batches.
%
%   NEIGHBOUR
%       (string, optional) the name of a .mat file, with a variable called
%       OPT.NAME_NEIGH. This is a VxW matrix, where each the v-th row
%       is the list of neighbours of vertex v (potentially paded with zeros).
%       If unspecified, the neighbourhood matrix is generated for the standard
%       MNI surface with ~80k vertices.
%
% FILES_OUT
%   (string, optional) the path to the output .mat file
%
% OPT
%   (structure) with the following fields:
%
%   REGION_GROWING
%      (structure, optional) the options of NIAK_REGION_GROWING. The most
%      useful parameter is:
%
%      THRE_SIZE
%         (integer,default 80) threshold on the maximum region size
%         before merging (measured in number of vertices).
%
%   NAME_DATA
%      (string, default 'data') the name of the variable that contains
%      the data.
%
%   NAME_NEIGH
%      (string, default 'neigh') if FILES_IN.NEIGH is specified, the name of the
%      variable coding for the neighbour matrix.
%
%   FLAG_VERBOSE
%      (boolean, default true) turn on/off the verbose.
%
%   FLAG_TEST
%      (boolean, default false) if the flag is true, the brick does not do anything
%      but updating the values of FILES_IN, FILES_OUT and OPT.
%
% _________________________________________________________________________
% OUTPUTS:
%
% The structures FILES_IN, FILES_OUT and OPT are updated with default
% valued. If OPT.FLAG_TEST == 0, the specified outputs are written.
%
% _________________________________________________________________________
% COMMENTS:
%
% Copyright (c) Pierre Bellec, Sebastian Urchs
%   Centre de recherche de l'institut de Gériatrie de Montréal
%   Département d'informatique et de recherche opérationnelle
%   Université de Montréal, 2010-2014
%   Montreal Neurological Institute, 2014
% Maintainer : pierre.bellec@criugm.qc.ca
% See licensing information in the code.
% Keywords : clustering, surface analysis, cortical thickness, stability
% analysis, bootstrap, jacknife.

% Permission is hereby granted, free of charge, to any person obtaining a copy
% of this software and associated documentation files (the "Software"), to deal
% in the Software without restriction, including without limitation the rights
% to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
% copies of the Software, and to permit persons to whom the Software is
% furnished to do so, subject to the following conditions:
%
% The above copyright notice and this permission notice shall be included in
% all copies or substantial portions of the Software.
%
% THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
% IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
% FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
% AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
% LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
% OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
% THE SOFTWARE.

%% Initialization and syntax checks

% Syntax
if ~exist('files_in','var')||~exist('files_out','var')
    error('niak:brick','syntax: [FILES_IN,FILES_OUT,OPT] = NIAK_BRICK_STABILITY_SURF_REGION_GROWING(FILES_IN,FILES_OUT,OPT).\n Type ''help niak_brick_stability_surf_region_growing'' for more info.')
end

% FILES_IN
list_fields   = { 'data' , 'neigh'       };
list_defaults = { NaN    , 'gb_niak_omitted' };
files_in = psom_struct_defaults(files_in,list_fields,list_defaults);

% FILES_OUT
if ~ischar(files_out)
    error('FILES_OUT should be a string!');
end

% Options
if nargin < 3
    opt = struct;
end
list_fields   = { 'flag_verbose' , 'name_data' , 'name_neigh' , 'region_growing' , 'rand_seed' , 'flag_test' };
list_defaults = { true           , 'data'      , 'neigh'          , struct           , []          , false       };
opt = psom_struct_defaults(opt,list_fields,list_defaults);

if ~isfield(opt.region_growing,'thre_size')
    opt.region_growing.thre_size = 80;
end
opt.region_growing.flag_verbose = true;

% If the test flag is true, stop here !
if opt.flag_test == 1
    return
end

%% Read the data
data = load(files_in.data);

if ~isfield(data,opt.name_data)
    error('I could not find the variable called %s in the file IN.DATA',opt.name_data)
else
    data = data.(opt.name_data);
end
[N,V] = size(data);

% Read the neighbourhood matrix
f_neigh = load(files_in.neigh, opt.name_neigh);
neigh = f_neigh.(opt.name_neigh);

%% Conduct Region Growing
if opt.flag_verbose
    fprintf('Region growing:\n')
end
out.part_roi = niak_region_growing(data,neigh,opt.region_growing);
out.data_roi = niak_build_tseries(data,out.part_roi);

%% Save the results
save(files_out,'-struct','out');
